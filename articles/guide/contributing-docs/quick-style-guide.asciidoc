---
title: Quick Style Guide
order: 70
layout: page
---

++++
<style>
.line-through {
  text-decoration: line-through;
}
.sect2 > .paragraph {
  margin-left: 1em;
}
.ArticleLayout-module--articleLayout--1iiWs .exampleblock {
  background: var(--text-selection-background);
  margin-inline-start: calc(var(--docs-space-m));
}

.exampleblock .content {
  padding: var(--space-xs);
}
</style>
++++

= Quick Style Guide
:experimental:

== Miscellaneous terms

=== "3D"

Abbreviation of _three dimensions_ or _three-dimensional_.
*Not* _3-D_.

== A

[[a_to_z.a_an]]
=== "a" / "an"

The choice of whether to use _a_ or _an_ depends on the *sound* of the following element, not purely on whether or not that element begins with a vowel.

If the *sound* of the next item is a vowel sound when that item is read in a natural way, use _an_;
otherwise, use _a_.

For example:

[example]
====
_She decided to do *a* university course._
+++[+++_University_ begins with a consonant sound.+++]+++

_It was *an* unusual choice._ +
*[_Unusual_ begins with a vowel sound.]*

[cols="1,1",frame=none,grid=none]
|===
|_We stayed in *a* hotel on the Left Bank._
|[_Hotel_ begins with a consonant sound.]

|_It was *an* honest mistake._
|[_Honest_ begins with a vowel sound.]
|===
====

This idea includes, for example, acronyms. Decide on how the acronym is usually read &ndash; as a word or as individual letters &ndash; and select _a_ or _an_ based on the resulting initial sound.
For example:

[example]
====
_The product comes from *a* US company._ +
_Send me *an* SMS when you are ready._
*[_SMS_ is read as _ess_em_ess_, so begins with a vowel sound.]* +
_He is a former member of *a* SWAT team._
*[_SWAT_ is generally pronounced as one word &ndash; _swat_.]* +
====

abbreviations::
Do not terminate abbreviations with a period if the last letter of the unabbreviated form is included in the abbreviation.
For example:
+
[example]
====
_Mr Smith +
Mrs Smith +
Ms Smith +
Prof. Smith +
Dr Smith +
St Petersburg +
Microsoft Corp._ +
etc.

// M. Duval *[Abbreviation of French word _monsieur_.]*
====
+
In general, plurals of abbreviations are formed by adding a lowercase _s_.
Do not use apostrophe _s_ (_&apos;s_) for this purpose.
For example:
+
[example]
====
SOPs *[standard operating procedures; not _SOP&apos;s_]*

APIs *[Not _API&apos;s_.]*
====

above::
Do not use _above_ to indicate the position of an item on a page.
Various devices, screen readers and browsers may position elements in different places.
Instead, use _previous_ or _earlier_.

"add-in"::

"add-on"::

admonitions::
Admonition blocks such as `[NOTE]`, `[TIP]`, or `[WARNING]` can be used to emphasize important issues.
However, do not overuse them, as this can interfere with the flow of the text .
There should be no more than three admonitions on a page.
+
Use a descriptive title for admonitions.
+
For example:

[example]
====
  .Do not overuse admonitions
  [WARNING]
  Overusing admonition blocks interrupts the flow.


.Do not overuse admonitions
[WARNING]
Overusing admonition blocks interrupts the flow.
====

“advice”::

"Advice" is an uncountable noun.
So, it can't be used with the indefinite article ("an") and it can't be plural.
If you want to use "a" or "an", you need to introduce another word, such as "piece" or "bit".
For example:
+
[example]
====
The developer gave me a good piece of advice.
====
+
You can use phrases such as "some" and "a lot of".
For example:
+
[example]
====
The user guide contains a lot of good advice.
====

"agnostic"::
This term is sometimes used to indicate the absence of a dependence on some other software component, such as an operating system or platform.
It is better to use a clearer term, such as _platform-independent_.

"aka"::
This is an abbreviation of _also known as_.
It has its origins in police usage and, hence, conveys an inappropriate tone for software documentation.
Instead, use parentheses or the word _or_.
For example:
+
[example]
====
The company specializes in software as a service *(SaaS)*.

Each instantiated object of the class has a separate copy, *or instance*.
====

"a.m.", "p.m."::
Write these in lower case, with periods.
There is a non-breaking space (`\&nbsp;` in AsciiDoc) between the given time and _a.m._ or _p.m._
For example:
+
[example]
====
The meeting started at 9&ratio;15 *a.m.*

We received the email at 5&ratio;00 *p.m.* yesterday.
====

ampersand ("&amp;")::
Do not use the ampersand character in place of _and_ in general text.

"and&nbsp;/&nbsp;or"::
The slash ("/") character in this expression is preceded and followed by non-breaking spaces (`\&nbsp;` in AsciiDoc).
+
See <<a_to_z.slash,slash ("/")>>.

angle brackets::
The name for the _<_ and _>_ symbols.

anti-malware::

antialiasing::

"antivirus"::

apostrophe (`')::
The apostrophe has a defined function: to indicate when one or more letters have been omitted.
For that reason, it is used in contracted forms of verbs. In general, in our technical documentation, we avoid using contracted forms.
They are correct, but more appropriate to less formal writing.
Nevertheless, to show the function of the apostrophe in contractions in general, here are some examples:
+
[example]
====
I am -> I'm [the letter "a" is omitted]

She is -> She's [the letter "i" is omitted]

They are not -> They aren't [the letter "o" is omitted]
====
+
There are some special cases where the system has been adapted, by convention.
For example:
+
[example]
====
He will not -> He won't [A little illogical, but it is the accepted contraction.]

We shall not_ -> We shan't [And not, for example, "sha'n't", which might be more logical.]
====
+
In addition to forming contractions, there is another standard use of the apostrophe in English: to indicate possession.
In fact, this has its logic.
In Old English, the possessive case of a noun was formed by adding "-es" to it.
In modern English, the "e" has been dropped from that suffix.
The omission of the "e" is signalled by that apostrophe.
+
The possessive form of a single noun is formed by adding "'s".
For example:
+
[example]
====
The developer's guide

The boss's office
====
+
To form the possessive of a plural noun, using an apostrophe, the rule is:
+
write the plural
+
where the plural ends in "s" (the commonest case), place the apostrophe after that "s"
+
in the few irregular cases where the plural does not end in "s" (for example, "men", "women", "children"), add "'s", as for a single noun
+
For example:
+
[example]
====
The employees' salaries

The bosses' salaries

The women's records

The mice's tails
====
+
For when to form a possessive using an apostrophe, and when to use "of", see <<a_to_z.possessive, possessive>>.

“application”::

apposition::
Consider this sentence:
+
[example]
====
The company CEO, Nick Smith, attended the meeting.
====
+
In this sentence, "The company CEO" and "Nick Smith" identify the same entity (in this case, a person).
In other words, "Nick Smith" is another name for "the company CEO".
In the terminology, the phrase "Nick Smith" is "in apposition" with "the company CEO".
Notice that, in this situation, the phrase that is in apposition is delimited by commas.
+
Now consider this sentence:
+
[example]
====
The company CEO, Nick Smith, spoke to company employee Susan Rae.
====
+
In this case, "company employee" and "Susan Rae" do not identify the same entity.
There may be only one Susan Rae, but there are probably many other company employees.
So, "Susan Rae" is not in apposition with "company employee".
Hence, "Susan Rae" is not delimited by commas.
+
Let's look at an example that is more relevant to the context of technical documentation.
+
Here is some information about the parameters of a method.
+
[example]
====
The method takes a single parameter: `duration`.

The method's parameter, `duration`, specifies the time in milliseconds that the animation should run.
====
+
Here, as there is only one parameter, "the method's parameter" and "duration" refer to the same entity. "duration" is in apposition with "the method's parameter", and so is delimited by commas.
+
Here is some similar information but, this time, the method takes more than one parameter.
+
[example]
====
The method takes two parameters: `startTime` and `duration`.

The parameter `duration` specifies the time in milliseconds that the animation should run.
====
+
Here, "parameters" and "duration" do not refer to the same entity.
So, "duration" is not in apposition with "parameters".
For this reason, "duration" is not delimited by commas.

"approximately"::
Write this in full; do not use _approx._

articles::
Missing and misused articles (_a_, _an_, _the_) are a very common problem, especially for speakers of languages which do not have articles, such as Finnish, Russian and Japanese.
+
Although the basic concept of articles is quite simple, there are some special cases and exceptions that can complicate the issue.
You may find the following useful:
+
// Because of Finnish text
pass:[<!-- vale Vale.Spelling = NO -->]

* http://www.grammarly.com/handbook/grammar/articles/[Grammarly Handbook] about the use of articles (in English)

* https://englantia.wordpress.com/grammar/yksikko-monikko-ja-artikkelit/[Yksikkö, monikko ja artikkelit] (in Finnish)

* http://materiaalit.internetix.fi/fi/kielet/englanti11/e1_lesson2.htm[Articles] (in Finnish)

pass:[<!-- vale Vale.Spelling = YES -->]

[[a_to_z.as_if_or_like]]
"as if" or "like"?::
Consider this sentence:
+
[example]
====
It looks as if it's going to rain.
====
+
Here, the clause "it's going to rain" contains a finite (full) verb ("is going to rain").
In this situation, we should use "as if" to connect the two parts of the sentence.
It is not correct to say, "It looks like it's going to rain," although this is a very common grammatical error.
+
Here is another sentence:
+
[example]
====
It looks like rain.
====
+
Here, the single-word phrase "rain" does not contain a finite verb.
In this situation, we should use "like" to connect the two parts of the sentence.
+
Another way of thinking of this is to say that "as if" expects to be followed by a verb clause.
In contrast, the word "like" expects to be followed by a noun or a noun phrase.
+
Some other examples:
+
[example]
====
_Treat the issue as if it were a bug._ [verb clause]
====

[[a_to_z.as_or_like]]
“as” or “like”?::
Consider this sentence:
+
[example]
====
Edit the file as you would normally.
Make the amendments as described below.
As I have already mentioned, the software is open-source.
Treat the issue as a bug.
====

"as such"::
This phrase does not mean "for that reason".
Instead, it means "in its capacity as the previously mentioned thing". For example:
+
[example]
====
This software is the most capable of its peer group and, as such, is an excellent buy.

I was the chief designer on this project and, as such, I take full responsibility for design defects.
====
+
"As such" is often erroneously used in place of phrases such as "so" or "consequently".
Here are some examples of incorrect usage:
+
[example]
====
Developers appreciate the convenience of the toolkit and, as such, it is a popular choice. [Incorrect]

The team were in a hurry to complete the project and, as such, made several poor decisions. [Incorrect]
====

AsciiDoc::
See “The Longer View” for general guidelines on AsciiDoc formatting in Vaadin technical documentation.

"assembly language"::
Use _assembly language_, rather than _assembler_.

asterisk::
The _*_ character is called an _asterisk_.
Do not use the term _star_.

“asynchronous”::
The adjective is _asynchronous_.
The adverb is _asynchronously_.

at::
The _@_ character is called the _at_ character.
(This comes from traditional accounting notation where the cost of multiple items at a specific cost would be given as, for example, _10 apples @ 5  cents = 50 cents_, which would be read as _10 apples *at* 5 cents equals 50 cents_.)

author::
For some articles, it may be required to show the author.
Authors can identify themselves after the section title as follows:
+
----
 [.author]
 [name]#Marko Gr&ouml;nroos# <magi@vaadin.com>
----

+
For section, this should be in the overview.
// Not sure what this means?
+
Note that for non-ASCII characters, you should use HTML character entity markup.

"auto-"::
There is no general rule on whether or not a word that begins with the prefix _auto-_ should be hyphenated.
It is best to check.
If the word is not given either in this guide or in the Merriam-Webster online dictionary, do not invent it yourself; use another term, for example with the adverb _automatically_.

“awesome”::
In its literal meaning, _awesome_ is used to describe something that causes awe, a feeling of respect blended with fear or wonder.
+
[example]
====
The launch of the huge rocket on a pillar of smoke and flames was an awesome sight.

The enormously powerful waterfall is really an awesome spectacle.
====
+
In modern informal speech, _awesome_ has been hijacked from its literal meaning to be a synonym for _very good_.
Please avoid this usage in technical documentation.

== B

"backup", "back up"::
The noun and adjective are _backup_.
The verb is _to back up_.
For example:
+
[example]
====
Confirm that the *backup* completed successfully.
*[Noun]*

It is vital to have reliable *backup* procedures in place.
*[Adjective]*

You should back up all your files regularly.
*[Verb]*

The data is subsequently *backed up* to the cloud.
*[Verb]*
====

“back end”::

backslash::
The "\" character is called _backslash_.

"backspace"::

"base64"::

"below"::
Do not use _below_ to indicate the position of an item on the screen, as different devices and browsers may position elements differently.
+
Consider using _later_ or _in the following_.

"beta"::
Written in lowercase, unless it appears differently as part of a defined product name.

"big-endian"::
Lowercase and hyphenated.

"blind"::
Avoid using _blind_ in an idiomatic or metaphorical sense.
+
To refer to people, use, for example, _a blind person_ or _a visually impaired person_ (whichever is more accurate in the context).
+
See also <<a_to_z.color_blind,color blind>>.

"Bluetooth"::
_Bluetooth_ is a proper noun and should be capitalized.

"Boolean"::
Capitalize (_Boolean_) in general use.
Use lowercase in the context of a language where _boolean_ is a data type.

"bot"::

“both”::
"Both" is an emphatic word that applies specifically to two stated things.
It cannot be used for more than two.
For example:
+
[example]
====
This functionality is available in both Eclipse and NetBeans.
====
+
It would be incorrect to say, for example:
+
[example]
====
 This functionality is available in both Eclipse, NetBeans, and IntelliJ IDEA.
====
+
There is no very neat way to apply such emphasis to more than two things.
It would be necessary to say something like, for example:
+
[example]
====
This functionality is available in all of Eclipse, NetBeans, and IntelliJ IDEA.
====
+
However, in most contexts, such emphasis is not required.

braces::
The _{_ and _}_ characters are called _braces_.

brackets::
The _[_ and _]_ characters are called _brackets_ or _square brackets_.
+
For the _(_ and _)_ characters, see <<a_to_z.parentheses,parentheses>>.

"breakpoint"::
// MS

"built-in"::
//-

== C

"callback", "call back"::
The noun and adjective are _callback_. The verb is _call back_.

"callout", "call out"::
The noun and adjective are _callout_. The verb is _call out_.

"cancel"::
_canceled_, _canceling_, _cancellation_.
// MS

capitalization::
We should capitalize only when there is a good reason for doing so.
Otherwise, there is a danger that capitalization can creep into lots of areas where it has no place.
+
One situation where this often happens is in the context of common abbreviations and acronyms.
Many of us tend to think that, because capital letters are used in an acronym, we should also use capital letters when the term is written out in full.
This is usually not the case, unless the term is a proper noun. (See <<a_to_z.proper_nouns, proper nouns>>.)
+
[cols="1,2"]
|===
|CLI
|command-line interface
|MFA
|multi-factor authentication
|SaaS
|software as a service
|JDK
|Java Development Kit [proprietary name]
|===

caret::
The _^_ sign is called a _caret_.

"catalog"::

"cell phone"::
Use _mobile_ or _mobile phone_ instead.

cent::
The _cent_ symbol (_&cent;_) is represented as `\&cent;` in AsciiDoc.

"chat"::
_Chat_ may refer to different activities, depending on the context.
Use _chat_ to refer to exchanging text messages in real time, if the context makes the meaning clear.
Use _voice chat_ to refer to communicating by voice.

"check"::
Do not use _check_ to refer to selecting a checkbox in the user interface.
Use _select_ instead.

"check mark"::
In the UI, a visual indication that an item is selected.

"checkbox"::
Use _select_ and _clear_ to refer to user interaction with checkboxes.

"click"::
This is both a verb and a noun.
More-specific variants are _left-click_, _right_click_, and _double-click_ (all hyphenated).
For example:
+
[example]
====
Enter the required details and *click* [guibutton]#OK#.

*Right-clicking* on the dropdown presents the user with more options.
====

“client side”::
When used as a noun phrase, this should be written with no hyphen:
+
[example]
====
The validation is handled on the client side.
====
+
When used as an adjective phrase, it should be written with a hyphen to avoid ambiguity:
+
[example]
====
Client-side processing handles the validation.
====

"client&nbsp;/&nbsp;server"::
Use non-breaking spaces before and after the slash ("/") character.
In AsciiDoc, this would be written as `client\&nbsp;/\&nbsp;server`.

"cloud"::

code::

"codebase"::
Not _code base_.

colon (“:”)::
The function of a colon in a sentence is to signal the beginning of an explanation or a list.
Often, we can think of it as saying, "and it is this..." or "and this is what I'm talking about...". Some examples of this are:
+
[example]
====
There can be only one reason he is late: he has missed the flight.

Annabel has three valuable characteristics: she is clever, she is conscientious, and she is honest.

The parameter can be of several types: integer, boolean, or string.

On seeing the results of my work, I felt only one emotion: pride.
====
+
A colon is also commonly used to introduce a list, particularly at the end of a sentence. For example:
+
[example]
====
Three cities are in the running to stage the next Olympics: Beijing, Chicago, and Melbourne.
====
+
A colon should not be used to join two full clauses outside the uses mentioned here.
If you are looking for the right punctuation to join two clauses that have some logical relationship, consider using a <<a_to_z.semi-colon, semi-colon>>.
Do not use a comma for this purpose.
(See <<a_to_z.comma_splice, comma splice>>.)
+
We use US English in our documentation.
US usage allows a colon to be followed by a sentence beginning with a capital letter, if that sentence is the first of two or more sentences that are governed by the same colon.
+
[example]
====
There may be several reasons to learn Esperanto: It is completely regular, so you do not need to learn a lot of exceptions.
It is not associated with any specific country, so has no political baggage.
Finally, it is just fun to learn.
====
+
However, if the colon governs only one sentence, begin the sentence with a lowercase letter:
+
[example]
====
There is a good reason to learn Esperanto: it is  fun to learn.
====

[[a_to_z.color_blind]]
"color blind"::

colloquial expressions::

"combo box"::
Not _combobox_.

comma splice::
Consider the following (incorrectly punctuated) sentence:
+
[example]
====
You should never divide by zero, this will cause a runtime error. [Incorrect]
====
+
In this example, we have two complete clauses, as each one has a subject and a finite (full) verb.
In this situation, it is an error to join the two clauses with a comma. This error is often called a "comma splice".
("Splice" means "join".)
+
We have several options to rectify this error.
The simplest option is to make each clause a sentence on its own:
+
[example]
====
You should never divide by zero.
This will cause a runtime error.
====
+
This solution is grammatically correct.
However, it does not show the logical connection between the two clauses. A better option would be to use different punctuation.
A semi-colon would serve the purpose:
+
[example]
====
You should never divide by zero; this will cause a runtime error.
====
+
Unlike a comma, a semi-colon can be used to join two complete clauses.
Moreover, it implies a logical connection between them, although the specific logic is left to the reader's interpretation. (See <<a_to_z.semi-colon, semi-colon>>.)
+
Another option would be to use an appropriate conjunction.
As its name suggests, a conjunction is a joining word.
Some common conjunctions are: _and_, _but_, _or_, _because_, _as_ and _so_.
Conjunctions usually imply some kind of logical connection between the clauses that they join.
+
In our example, we want to express a concept of causation.
_Because_ and _as_ would be suitable options:
+
[example]
====
You should never divide by zero, because this will cause a runtime error.

You should never divide by zero, as this will cause a runtime error.
====
+
Although the meaning of these two versions is the same, in fact, by convention, we use _as_ more often than _because_ to express this kind of causation.
So the second version is the best of the options that we have discussed.

"command line"::
When it is used as a noun phrase, write _command line_.
When it is used as an adjective phrase, write _command-line_.
For example:
+
[example]
====
You can invoke the tool from the command line.
*[Noun phrase]*

There are several command-line options.
*[Adjective phrase]*
====
+
However, see <<a_to_z.command_line_interface,"command line interface">>

[[a_to_z.command_line_interface]]
"command line interface"::
This is a common, easily recognized phrase, so it is unnecessary to hyphenate _command line_ in this context.
+
In the first reference in the document, write this as _command line interface ("CLI")_.
In subsequent occurrences, it is acceptable to write it as _CLI_.

"command prompt"::
In the context of the command line interface, the _command prompt_ is the text that indicates the location where the user may enter a command.
Typical command prompts are "$ " (in Unix-like systems) and "C:\> " (in Windows-based systems).

commas::

conditional::

congratulations::
Avoid congratulating the reader, for example, for successfully working through a tutorial and completing the process that the tutorial describes.
It sounds patronizing.

"consist of"::
This indicates that one thing is made up of one or more other things, and nothing else.
If you want to say that one thing is made up of one or more things *plus* some other things, use _include_.
For example:
+
[example]
====
The course consists of six modules.
*[In other words, there are six (and only six) modules in the course.]*

The course includes two modules on object-oriented design.
*[In this case, the two modules on object-oriented design are just a part of the course.]*
====

"config"::
Avoid this as an abbreviation for _configuration_.
Spell it out in full.

"cons"::
See <<a_to_z.pros_and_cons,"pros and cons">>.

[[a_to_z.contractions]]
contractions::
Contractions (or "contracted verb forms") are those where one or more letters are omitted. For example:
+
[example]
====
She's on her way to the meeting. [_She's_ is a contraction of _she is_.]

They'll be here on Friday. [_They'll_ is a contraction of _they will_.]
====
+
In general use, contractions are perfectly acceptable and correct. In fact, using contractions can help to make a non-native speaker's English sound much more natural.
+
However, contractions are not generally appropriate in formal contexts, such as academic works and legal documents.
We have made the decision not to use contractions in our technical documentation, perhaps sacrificing a little friendliness of tone in the interests of simplicity of language.

control-key combinations::
If your audience includes macOS users, provide the appropriate key-naming terminology.
Spell out _Control_ and _Command_, rather than abbreviating them.
For example:
+
[example]
====
Press [guibutton]#Control+S# ([guibutton]#Command+S# on Macintosh) to save.
====

"CPU"::

"CSS"::
It is acceptable to use _CSS_, rather than write out _cascading style sheets_ in full.
Do not use the extension _.css_ to refer to a file type.

"cross-site request forgery"::
On the first mention, write this as _cross-site request forgery (CSRF)_.
On subsequent mentions, _CSRF_ is sufficient.

"CSV"::
Use the capitalized abbreviation _CSV_, rather than the extension _.csv_.
For example:
+
[example]
====
You can download this as a *CSV* file.
*[Not _a .csv file_.]*
====

cultural references::

currency::
Place currency symbols before the numeric amount. For example:
+
====
$25.50

€3

&yen;45.00
====
+
In general, in the absence of other information, we assume that the dollar ($) symbol indicates US dollars.
It is not necessary to specify this.
+
However, where it is required to distinguish between dollar currencies of different states, it should be written as in the following examples:
+
====
US$4.50

AUS$19.10

CA$200

HK$99.99
====
+
There is no hard-and-fast rule for forming country codes in this context.
Just make sure that it is clear which country is being referred to.

== D

dangling participles::
Participles are formed from verbs. Present participles end in _-ing_; past participles often end in _-ed_, though there are many irregular forms. Some examples:
+
[cols="1,1,1"]
|===
|*infinitive*
|*present participle*
|*past participle*
|to bring
|bringing
|brought
|to have
|having
|had
|to lead
|leading
|led
|to walk
|walking
|walked
|to write
|writing
|written
|===
+
Participles are often used as convenient concise forms. For example:
+
====
*Being* the project leader, Hannah Jones chaired the meeting. *[A more concise form of: _As she is the project leader, Hannah Jones chaired the meeting._]*

I was given a spec *written* on the back of an envelope. *[An alternative form of: _I was given a spec that was written on the back of an envelope._]*

*Having* caught a terrible cold, I phoned my colleagues to postpone the meeting. *[In other words: _As I had caught a terrible cold, I postponed the meeting._]*
====
+
Participles can work well when used in this way, but we need to be careful that our sentence is unambiguous. Consider the last example again:
+
====
Having caught a terrible cold, I phoned my colleagues to postpone the meeting.
====
+
Who had caught the cold?
Was it me or was it my colleagues?
Clearly, it was me, but how do we know this?
We know because *we assume that the next noun phrase after the participle clause indicates the person or thing that the participle refers to*.
+
Look at these similar sentences:
+
====
Being corrupt, the file was rejected. *[Since the next noun phrase after the participle phrase is _the file_, it is clear that it is the file that is corrupt.]*

Being corrupt, I rejected the file. *[In this case, basing our understanding purely on the word order, we might interpret this to mean that I am the one who is corrupt.]*
====
+
In most cases of such poorly chosen word order, we can probably guess at the intended meaning.
However, our goal is that our readers should correctly interpret our material on the first reading.
+
When the structure of the sentence leaves it unclear to whom or what the participle refers, this is called a "dangling" or "unrelated" participle.
+
Here are some other examples of poorly chosen, and hence distracting, word order, with some suggestions for improvement:
+
[cols="1,1"]
|===
|*"Dangling participle" version*
|*Improved version*
|*Being* a public holiday, the office was closed.
|As it was a public holiday, the office was closed.
|*Having* crashed three times in one week, we decided to replace the server.
|As the server had crashed three times in one week, we decided to replace it.
|===

dash (“–”)::

“data”::
Although _data_ is, strictly speaking, a plural Latin form, the generally accepted convention is to treat it as singular. For example:
+
[example]
====
We need to ensure that the data is encrypted. *[Not _the data are encrypted_]*
====

dates::
In our documentation, we use the format `<month> <day number>, <year>`. We do not use the ordinal abbreviation suffixes _-st_, _-nd_, _-rd_ or _-th_.
Nor do we write the word _the_ between the month name and the day number.
For example:
+
[example]
====
June 15, 2020

May 1, 2022
====
+
Avoid expressing dates using variations of the _mm/dd/yyyy_ or _dd/mm/yyyy_ formats.
There are different conventions for these formats around the world, so that the possibility of confusion and misunderstanding is high.
Instead, write out dates using month names, as described earlier.

days::
Write out the days of the week in full, if space allows this.
Otherwise, abbreviate the names to three characters, as follows:
+
[%header,cols="2,1,1"]
|===
|Day | 3-letter abbreviation | 2-letter abbreviation
|Sunday | Sun | Su
|Monday | Mon | Mo
|Tuesday | Tue | Tu
|Wednesday | Wed | We
|Thursday | Thu | Th
|Friday | Fri | Fr
|Saturday | Sat | Sa
|===

"decrement"::
The verb _decrement_ means to decrease an integer by either 1 or some other specified value.
It is the opposite of _increment_.

definite article (“the”)::

"deprecate"::
In the context of software development, if something is _deprecated_, it means that it is *recommended* not to use this thing.
It does not mean that it is not possible to use it.
The term _deprecated_ is often used in situations where that particular thing is scheduled to become unavailable at some point in the future.

"DevOps"::
An abbreviation of _development operations_.
Write it as _DevOps_.

"dialog"::
A _dialog_ or _dialog box_ is an element of the user interface.
A _dialogue_ is a conversation between two people.

"different"::
Use _different from_, rather than _different than_ or _different to_.

"directory"::
Use _directory_, instead of _folder_, unless there is a good reason to do otherwise.
One such reason might be that the tool under discussion uses the term _folder_ in its user interface.

"distributed denial-of-service"::
On the first mention, write _distributed denial-of-service (DDOS)_.
On subsequent mentions, it is sufficient to write _DDOS_.

"DNS"::
_DNS_ is an abbreviation of _Domain Name System_ (not _Server_), which is a protocol.
A server that operates this system is a _DNS server_.
A client of such a server is a _DNS client_.

"document"::
Write this in full; not _doc_.

"domain name registrar"::

double quotes (“)::
See “quotation marks”

“dropdown”::
The spelling is "dropdown".

== E
"e-book"::

"e-commerce"::

"e.g."::
Avoid using this.
Instead, write _for example_.

“either”::
Like the word _both_, the word _either_ is used in the context of two things.
For example:
+
[example]
====
The parameter can be either an integer or a boolean.
====
+
It is not correct to use _either_ where there is a choice between more than two things. For example, this is incorrect:
+
[example]
====
The parameter can be either an integer, a boolean or a string. *[Incorrect]*
====
+
In such a case, we could say, for example:
+
[example]
====
The parameter can be an integer, a boolean, or a string.
====
+
For added emphasis, we could also say:
+
[example]
====
The parameter can be any of an integer, a boolean, or a string.
====
+
For clarity, _either_ should be placed as close as possible to the point where choice occurs.
For example:
+
[example]
====
You can *either* choose to ignore the message or to fix the problem before continuing.
*[Inappropriate, because the choice is not whether to choose or not to choose.]*

You can choose *either* to ignore the message or to fix the problem before continuing.
*[Better, because it indicates that the choice is between ignoring and fixing.]*
====

"element"::
Use _element_, rather than _tag_, when referring to HTML elements.

em dash ("&mdash;")::
In US English, a pair of _em_ dashes (so called because they have the same width as the letter _M_) are used to indicate a fragment of text in parenthesis. The pair of _em_ dashes imply a more significant break in the structure of the sentence than one marked by a comma or brackets.
There should be no space either before or after an _em_ dash.
For example:
+
[example]
====
The tool does not fix the bug&mdash;if only it were that simple&mdash;but it does help you to identify its location.

You can use a dropdown or a combo&mdash;personally, I prefer the latter&mdash;but, either way, the user needs to be able to select from the available options.
====
+
A single _em_ dash can be used to add an afterthought or aside.
For example:
+
[example]
====
You can use whichever IDE you prefer&mdash;it is entirely up to you.

Make sure your code is well commented&mdash;you will thank yourself when you revisit it six months later!
====
+
Avoid using the _em_ dash too much; it can quickly become distracting and even irritating.
Very often, a comma or semi-colon is a more appropriate choice of punctuation, especially in more formal writing, such as technical documentation.
The two previous examples could also be written as:
+
[example]
====
You can use whichever IDE you prefer; it is entirely up to you.

Make sure your code is well commented; you will thank yourself when you revisit it six months later!
====

"email"::

emphasis::
Use the emphasis styles, such as
`+++[+++classname+++]#+++ClassName+++#+++` emphasis for class names and
`+++[+++methodname+++]#+++methodName()+++#+++` for methods.

.Custom emphasis styles
[%header, cols="2,4,2"]
|====
|Style Element | AsciiDoc Example Code | Result
|Class Names | `+++[classname]#Component#+++` | [classname]#Component#
|Interface Names | `+++[interfacename]#EventListener#+++` | [interfacename]#EventListener#
|Method Names | `+++[methodname]#setValue()#+++` | [methodname]#setValue()#
|GUI Buttons | `+++[guibutton]#OK#+++` | [guibutton]#OK#
|GUI Labels | `+++[guilabel]#OK#+++` | [guilabel]#OK#
|File Names | `+++[filename]#readme.txt#+++` | [filename]#readme.txt#
|Other Monospace | `+++`appName`+++` | `appName`
|Key Caps | `+++kbd:[Ctrl + C]+++` | kbd:[Ctrl + C]
|Menu Choices | `+++"Help > Updates"+++` or +
`+++menu:Help[Updates]+++`| "Help > Updates"
|====

en dash ("&ndash;")::
The _en_ dash (so called because it has the same width as the letter _N_) is commonly used to indicate a range of values.
When used in this way, it is not preceded or followed by a space.
For example:
+
[example]
====
Select a number in the range 0&ndash;255.

The parameter should be a string of 8&ndash;10 characters.

The licence enables you to use the software on 1&ndash;3 computers.

He was chief designer (2003&ndash;9), and subsequently CEO of the company (2009&ndash;12).

The office is open Monday&ndash;Friday.
====
+
We can also describe ranges by using the words _from_ and _between_.
These forms should not be mixed with the _en_ dash.
Use one form or the other, but not both.
For example:
+
[example]
====
You can use the licence on between 1 and 3 workstations.
*[Not _between 1&ndash;3 workstations_.]*

The parameter should be a string of from 8 to 10 characters.
*[Not _a string of from 8&ndash;10 characters_.]*
====

"end user"::
The noun is _end user_. The adjective phrase is _end-user_.
For example:
+
[example]
====
The choice of licence depends on the number of *end users*.

This will minimize the level of *end-user* support that you need to provide.
====

"enter"::
In the context of IT systems, _to enter_ refers to inputting a specific piece of data to the system.
For example:
+
[example]
====
Enter your user ID and press [guibutton]#OK#.
====

"etc."::
This abbreviation is always terminated by a period.
+
Do not use _etc._ in situations where it is not clear exactly what it means.
For example:
+
[example]
====
Always be sure to include the currency symbol, such as "$", "£", "€", etc.
*[Here, it is clear that _etc._ refers to all the other possible currency symbols.]*
====

euro::
The _euro_ symbol (&euro;) is represented as `\&euro;` in AsciiDoc.
In amounts of money, place the _euro_ symbol immediately *before* the numeric quantity, in the same way as for, for example, the dollar or pound symbol.

exclamation mark ("!")::
Avoid using exclamation marks in technical documentation, unless it is as part of some code syntax.
Its use in normal text is distracting and detracts from the professional tone.
For example:
+
[example]
====
You have now created your component! *[Avoid this usage.]*

`#!/bin/bash` *[The exclamation mark is part of the script syntax.]*
====

== F
"field"::
Use the term _field_ in the context of databases.
Do not use _field_ in the context of the UI; instead, use, for example, _box_.

"filename"::

"fintech"::

"following"::
_Following_ may be used with some more specific term.
For example:
+
[example]
====
the following example

the following text

the following procedure
====
+
However, it may not always be necessary to be so specific.
We may use the expression _the following_ as a nouns phrase on its own.
For example:
+
[example]
====
*The following* is an example of how to use this functionality.

It may be instantiated using the default parameters, as in *the following*:
====

"for example"::
Use _for example_ in preference to _e.g._
+
If you use _for example_ in the middle of a sentence, use a semi-colon if there is a possibility of doubt as to which part of the sentence it relates to.
For example:
+
[example]
====
There are some differences between US and UK spelling, for example, the preference for _z_ or _s_ in verbs that end in _-ize_.
*[On first reading, the reader may hesitate over which part of the sentence _for example_ refers to.]*

There are some differences between US and UK spelling; for example, the preference for _z_ or _s_ in verbs that end in _-ize_.
*[The semi-colon makes it easier for the reader to interpret the sentence correctly on first reading.]*
====

[[a_to_z.former]]
“former”::
The word _former_ identifies the first of *two* options previously mentioned.
(_Former_ is often used in conjunction with _latter_, which indicates the last of *two* options previously mentioned.)
It is not correct to use _former_ in a situation where more than two options have been mentioned.
For example:
+
[example]
====

====

“front end”::
When _front end_ is used as a noun phrase, there is no hyphen.
A hyphen is used when the phrase is used as an adjective.
For example:
+
[example]
====
Processing takes place on the front end.

Front-end processing is kept to a minimum.
====

== G

Gbps::
Abbreviation of _gigabits per second_.
Do not use _Gb/s_.

"GDPR"::
On the first mention, use _the General Data Proctection Regulation (GDPR)_.
On subsequent mentions, use _the GDPR_.

GIF::
Do not use the extension _.gif_ to refer to a file type.

== H

"handheld"::
// MS

"hard disk"::

"hard drive"::

"hard-code"::
_Hard-code_, _hard-coded_, _hard-coding_.
// MS

“he” / “she” / “they”::
It is important to avoid using gender-specific pronouns (unless there is a significant reason for doing so).
Do not use _he&nbsp;/&nbsp;she_ or _he or she_, as this quickly becomes tedious.
+
The generally accepted way to treat this issue is to use the pronoun _they_.
For example:
+
[example]
====
Each person must do what *they* think best.
*[Not _what he or she thinks best_.]*
====

headings::
You should use title or headline case for all headings and chapter, section, or sub-section titles.
+
[example]
====
 = Style Guidelines for Vaadin Documentation
====
+
For a detailed description of capitalization rules, see for example:

* http://grammar.yourdictionary.com/capitalization/rules-for-capitalization-in-titles.html[Rules for Capitalization in Titles of Articles]: Your Dictionary

"hexadecimal"::
Write out _hexadecimal_ in full.
Do not abbreviate it to _hex_.

“hierarchy”::

“his” / “her” / “their”::

"hit"::
Do not use _hit_ to refer to pressing a key.
Instead, use _press_.

“hopefully”::

"host name"::
// MS

"hyperlink"::
Use _hyperlink_ in preference to _link_.

hyphen (“-”)::
There is often confusion about whether or not to use a hyphen in compound words (such as _start-up_ and _onboarding_) and words that include a prefix (such as _presales_ and _multifactor_).
English has no hard-and-fast rules about this; it is simply a question of accepted usage.
+
In general, use the Merriam-Webster online dictionary as a guide.
If the full compound word or prefixed word exists in the dictionary, use the form that the dictionary gives.
If the full compound word or prefixed word does *not* exist in the dictionary, use a hyphen.
For example:
+
====
start-up (noun)
*[This is the form given in the dictionary.]*

setup (noun)
*[This is the form given in the dictionary.]*

log-in (noun)
*[Neither _log-in_ nor _login_ is given in the dictionary.
So use a hyphen.]*
====
+
Sometimes, we want to mention a series of items, all hyphenated on the same base word.
In such cases, we can reduce repetition by applying distributed hyphenated descriptive words to the base word.
For example:
+
[example]
====
The device used a combination of first-generation and second-generation chips.
*[OK, but repetitive.]*

The device used a combination of first- and second-generation chips.
*[Better.]*
====

== I

"i.e."::
Use _that is_.

"I/O"::

“if” clauses in the future::
Clauses that refer to conditions in the future use the present tense.
The "result" clause uses the appropriate future form or imperative form.
For example:
+
_If there are any further releases in the future, you will receive an advisory email._ [Not _If there will be..._]
+
_Send us a message via our contact page if you have any problems._ [Not _If you will have..._]
+
See also <<a_to_z.time_clauses_in_future, time clauses in the future>>

"if" or "whether"::
Use _if_ in clauses that express a simple conditional meaning.
Use _whether_ in clauses that express uncertainty between two possibilities.
Sometimes, either is acceptable.
For example:
+
[example]
====
Let me know if you need help. +
*[That is, if the situation arises that you need help, let me know.]*

Let me know whether the fix works. +
*[That is, let me know which of the situations is true: does the fix work, or doesn't it work?]*

====

“in order to”::
Use “in order to” for clarity.
+
For example:
+
Instead of: “This the information you need to use the components correctly”, \
Use: “This is the information you need in order to use the components correctly”.

indefinite article::
See <<a_to_z.a_an,"a" / "an">>

"indent"::
_Indent_ is a verb that means to apply a greater left (and sometimes right) margin to text than that of the preceding material as a means of denoting some distinction between the two items.
+
Do not use _outdent_, as it is often unclear what exactly this means in a given situation.
Look for a different way to express this idea.

“information”::
"Information" is an uncountable noun.
In other words, we cannot talk about one information, two informations, etc.
For the same reason, we cannot use the indefinite article ("a" or "an"), as this implies a quantity of one.
Neither can an uncountable noun be used in the plural, as this, too, implies quantities.
+
If we want to impose a notion of quantity in relation to information, there are several options:
+
- use an intermediary word, such as "piece" or "bit"
- use a quantifier, such as "a lot of", "lots of", "some", etc.

"input"::
Do not use _input_ as a verb.
Instead, write _enter_.

"internet"::

"Internet of Things"::
On the first mention, write as _Internet of Things (IoT)_.
On subsequent mentions, write as _IoT_.

introduction::

introductory clauses::
Always use comma after an link:https://owl.english.purdue.edu/owl/resource/607/03/[introductory clause, phrase, or word].

[example]
====
After a while, you can look into it.

Nevertheless, fields are components.

Meanwhile, you can use a workaround.

Additionally, we need to make the call to the REST service.
====

“its” or “it’s”::
The possessive form of "it" is "its", with no apostrophe.
This is logical and consistent with the other possessive adjectives;
"I" -> "my", "you" -> "your", he" -> "his", "she" -> "her", etc.
There are no apostrophes in sight!
+
"It's" (with the apostrophe) is a contracted form, similar to "I'm", "you're", "he's", etc.
Here, the apostrophe performs its classical role of indicating that letters have been omitted.
In this way, "it's" can mean "it is" or "it has"; the context will always tell us which meaning is intended.
+
[example]
====
It's easy to make a mistake. *[_It's_ must mean _it is_, since _It has easy&hellip;_ makes no sense at all.]*

It's been a difficult day. *[_It's_ must mean _it has_, since _It is been&hellip;_ makes equally little sense.]*
====
+
See also <<a_to_z.contractions, contractions>>.

== J

"JPEG"::
Use this in preference to the filename extension _.jpg_ to refer to a file type.

== K

"Kbps"::
Abbreviation for _kilobits per second_. Don't use _kb/s_.

"key"::
Don't use this as an adjective to mean "crucial".

"key-value pair"::
Use a hyphen, rather than an en-dash.

"knowledge base"::

== L

“-l-” or “-ll-”?::

"labeled"::

Latin abbreviations::

“latter”::
See <<a_to_z.former,"former">>

"layout", "lay out"::
The noun is _layout_. The verb is _lay out_.

"lead"::
The past simple and past participle of _lead_ is _led_. For example:
+
[example]
====
This situation led to a number of problems.

He has led the company since 2006.
====

"leverage"::
Avoid using this as a verb.
Consider using _take advantage of_ or _make effective use of_.

“like” or “as”?::
See <<a_to_z.as_or_like, "as" or "like"?>>

"list box"::

lists::
An inline list should be introduced by a colon.
Items in the list can be separated by commas.
However, in cases where items in the list themselves contain commas, it is better to use semi-colons as separators, in order to avoid confusion.
For example:
+
[example]
====
There are three vital ingredients in this curry: onion, potato, and spinach.

There are three vital ingredients in this curry: onion, which should be roughly chopped; potato, which should be diced; and fresh spinach leaves, which should be thoroughly washed before use.
====

"livestream"::
//-

"login"::
The noun is _login_. The verb is _to log in (to)_.

"lower"::
Do not use _lower_ to refer to earlier versions of software.
Instead, use _earlier_.

== M

"macOS"::
Use _macOS_, even at the beginning of a sentence.

"markup"::
The noun is _markup_. The verb is _to mark up_.

"master&nbsp;/&nbsp;slave"::
Avoid this term.
Instead, consider using _primary&nbsp;/&nbsp;subordinate_.
// MS

"matrix"::
The plural is _matrices_.

"Mbps"::
Abbreviation of _megabits per second_. Not _Mb/s_.

menu header::
If an AsciiDoc file is intended to be rendered as a section, a page, or tab, it must have a _header block_.
This is used to build the menu in the documentation website.
+
----
---
title: Title of the article
order: 4
layout: page
---
----
+
`title`:::
  The title to be displayed in the menu.
  The title should be same as the title of the article, but can be a shortened version to keep the menu more tidy.

`order`:::
  Order number in the menu.
  If articles are reorganized, the order numbers may need to be reorganized, too.
  It is good practice to make them multiples of 10 or 100, in order to leave space to add new articles without having to renumber all the others.

`layout`:::
  The layout can be either `page` or `tabbed-page`.
  In a tabbed page, the sub-articles are displayed in tabs rather than in the menu.
  The default tab content comes from the `index.asciidoc`.

`tab-title`:::
  Sets the tab title in `tabbed-page` pages.
  It should be kept short.

"metadata"::

"method"::
As our documentation deals extensively with Java objects and methods, avoid using _method_ to mean _way_ or _process_.

method names::
Use empty parentheses at the end of method names to denote that they are methods.
In general, do not list parameter types for methods, unless this is required in order to indicate a specific version of a method.
It may also be necessary to specify a parameter when it is relevant in the context.
For example:
+
[example]
====
Call `setEnabled(false)` to disable it.
====

"MIME"::
Abbreviation of _multipurpose internet mail extensions_.

"mobile"::
Use _mobile_, _mobile phone_, or _mobile device_. Do not use _cell phone_.

months::
Write out names of months in full, if space allows.
If you need to abbreviate month names, use the following abbreviations:
+
[%header,cols="1,1"]
|===
|Month | Abbreviation
|January | Jan
|February | Feb
|March | Mar
|April | Apr
|May | May
|June | Jun
|July | Jul
|August | Aug
|September | Sep
|October | Oct
|November | Nov
|December | Dec
|===
+
Do not add a period to the abbreviated names.

== N

"N/A"::
Abbreviation of _not applicable_.

name server::

namespace::

"NAT"::
Abbreviation of _network address translation_.

"NoSQL"::

[[a_to_z.nouns_as_descriptors]]
nouns as descriptors::
English is very versatile in allowing nouns to be used as if they were adjectives.
For example:
+
[example]
====
Please close the *office* door quietly.

Select your preferred *keyboard* layout.
====
+
Bear in mind that when nouns are used like adjectives in this way, they are almost always used in the singular form, not plural.
For example:
+
[example]
====
She is the manager of a *shoe* shop. *[Not _a shoes shop_.]*

This is the responsibility of the *microchip* manufacturer. *[Not _the microchips manufacturer_.]*
====
“npm”::

numbers::
In text in general, integers between 0 and 9 (inclusive) should be written in words, while other numbers should be written as numerals.
Try to avoid beginning a sentence with numerals.
For example:
+
[example]
====
The team consisted of one team leader, two senior programmers, and 10 junior programmers.
====
+
However, in certain contexts, it may be preferable to write all numbers in numerals.
Such a context might be, for example, statistical or mathematical content, or where units are specified (such as degrees, metres, or kilograms).
For example:
+
[example]
====
In a survey, 7 out of 10 developers said that they preferred Python to Perl.

You can calculate the value using `2 * &pi; * r`.

The sample was found to have expanded by 6 mm at the end of the experiment.
====
+
Similarly, use numerals for
+
--
* page numbers
* version numbers
* numbers in a technical context, such as size of memory, processor speed, file sizes, etc.
* percentages
* negative numbers
* decimal numbers
* ranges of numbers
--
+
For a decimal number greater than -1 and less than 1, put an explicit 0 before the decimal point.
For example:
+
[example]
====
0.5 *[Not _.5_]*

-0.02 *[Not _-.02_]*
====

+
Avoid using Roman numerals (for example, _I_, _IV_, _vii_, _ix_).
+
Write out a number if it is an approximation, rather than an accurate figure.
For example:
+

[example]
====
There must have been a thousand people at the meeting.
*[Not _There must have been 1,000 people&hellip;_.]*

You had to write hundreds of lines of code.
*[Not _You had to write 100s of lines of code._]*
====
+

Write out ordinal numbers (_first_, _second_, _third_, etc.) in full.
Do not use _1st_, _2nd_, _3rd_, etc.

== O

"OAuth 2.0"::

"OK"::
Not _okay_.

"on-premises"::
Not _on-prem_.

"open source"::
As this is a common phrase, it is unnecessary to use a hyphen, even when it is used as an adjective phrase.

"OS"::
Abbreviation of _operating system_.

“overlay”::

Oxford comma::
See “lists”.

== P

"parent-child"::

parentheses::

passive voice::

PDF::
Do not use the extension _.pdf_ to refer to a file type.

"per"::
Use _per_ instead of the slash character ("/") to refer to a rate.
For example:
+
[example]
====
bits per second
*[Not _bits/second_.]*

words per minute
*[Not _words/minute_.]
====

percentages::
Use the required numeral and the percent sign ("%") with no space between them.
If the percentage begins the sentence, write the percentage expression in words.
For example:
+

====
In *99%* of cases, the methodology works.

*Ten percent* of hacking attempts succeeded.
====

"persist"::
Avoid using _persist_ with an object.
For example:
+
[example]
====
The user ID *persists* between sessions.
*[The meaning is that the user ID is retained.]*

We want to *persist* the user ID between sessions.
*[]*
====

phrasal verbs::

[[a_to_z.possessive]]
possessive::
English has two main ways of forming a possessive: the apostrophe and the preposition "of".

In general, use the apostrophe for people and animals. For example:

_The team leader's keyboard_

_A manager's salary_

_The employees' well-being_

_The horse's mouth_

Use the preposition "of" for things and ideas. For example:

_the name of the method_

_the beginning of the process_

_the keyboard of the computer_

_the door of the office_

A third possibility is to use one noun as a descriptor of another:

_the method name_

_the computer keyboard_

_the office door_

See also <<a_to_z.nouns_as_descriptors, nouns as descriptors>>.

"plugin"::

plurals::
Do not use _s_ in parentheses to indicate that there may be one or more of something.
For example::
+
[example]
====
Inspect the error message(s) for more detailed information. *[Avoid this form of optional plural.]*
====
+
This usage can be confusing for the reader.
Instead, choose an alternative wording, even if it is slightly longer.
For example:
+
[example]
====
Inspect any error messages for more detailed information.
====

"PNG"::
Do not use the file extension _.png_ to refer to a file type.

“practice”::

"precondition"::

"press"::
Use the verb _press_ to refer to pressing a key or key combination.
Do not use _hit_ in this context.

procedures::
In technical documentation, we very often want to describe the procedures that are necessary in order to perform some task.
Such procedures usually consist of a series of steps.
+
In most cases, we start with a top-level sentence.
For example:
+

[example]
====
Create a new project as follows:

To create a new project, follow these steps:
====
+
Do not start with an incomplete sentence at the top-level which is then completed by the text of each step.
This structure obliges the reader to keep the top-level text in mind in order to interpret the subsequent text correctly.
For example:
+
[example]
====
To create a new project, you must:
*[Avoid beginning with an incomplete sentence which is completed by the text of subsequent steps.]*

Log in&hellip;

Make sure you have installed the plugin&hellip;

Create a new app&hellip;
====
+
Use parallel structures in the steps that make up the procedure.
In other words, structure each step in a similar way to the others.

product names::
Product names, such as List Box, should be capitalized as is usual for proper nouns, not as if they were class names.
Use the class name if you are referring specifically to a class.
For example:
+
[example]
====
[classname]#ListBox# extends [classname]#ListBoxBase#.
====
+
However, do not use class names in component documentation, which should be language-independent; that is, neither Java- nor JavaScript-specific.

[[a_to_z.proper_nouns]]
proper nouns::

punctuation::
See the specific entries for each punctuation mark; for example, “commas”, “quotation marks”, etc.

== Q

quotation marks::
In general, when you want to put text in quotation marks, use double quotation marks ("&nbsp;").
Avoid using single quotation marks ('&nbsp;'), unless, of course, it is required by some code syntax.

== R

"real time"::
The noun phrase is _real time_.
The adjective phrase is _real-time_.
For example:
+
[example]
====
The data is retrieved in real time.

Real-time processing takes place at the frontend.
====

"regular expression"::
Do not use _regex_.

[[a_to_z.relative_clauses]]
relative clauses::
Relative clauses allow us to give more information about a person or thing that we mention in a sentence.
For example:
+
[example]
====
*Instead of saying:* _I asked Linda Johnson. She works in the same office as me_,

*it is neater to say:* _I asked Linda Johnson, who works in the same office as me_.
====
+
They are called "relative clauses" because they relate to some entity in the main clause of our sentence.
The word that links the relative clause to the main clause is often a "W" word, such as _which_, _who_, _where_, _when_, or _whose_.
The word _that_ is also often used as the linking word.
For example:
+
[example]
====
The software is written in Java, which is our preferred language.

Jean Reboulet, who led the design team, attended the meeting.

The conference was held in San Francisco, where the company has its headquarters.

We recommend performing full backups at the weekend, when the system is less busy.

We contacted Sandra Stein, whose team maintains the library.

This is the team that maintains the library.
====
+
We need to be aware that there are two kinds of relative clause: *defining* and *non-defining*.
+
Why is this important?
It matters because it has an impact on the punctuation we need to use, and also on the sentence structure.
+
A *defining relative clause*, as the name suggests, defines an entity in the main clause.
It gives us essential information in order to identify the person or thing that was mentioned.
In other words, without the information in this clause, our sentence would not have the same meaning and might not even make sense at all.
For example:
+
[example]
====
This is the bug *which our testing team reported*.
*[The relative clause is essential in order to understand which bug is being talked about.]*

The place *where you parked your car* is private property.
*[The relative clause identifies the place that was mentioned.]*

====

“repository”::
Do not use _repo_.

“respectively”::
//-

"REST"::
Use this acronym in preference to _representational state transfer_.

"runtime"::
//-

== S

[[a_to_z.s_or_z]]
“s” or “z”::

screenshots::
Every page should have at least one screenshot.
There should at least be a screenshot in an introduction or overview section.

section::
The basic structure of a new section file is as follows:
+

[example]
====
----
---
title: Title of the section
order: 4
layout: page
---

[[thechapter.thefeature]]
= Fine Feature

[.author]
[name]#Marko Gr&ouml;nroos# <magi@vaadin.com>

The Fine Feature is a feature of a feature...

[[thechapter.thefeature.basic-use]]
== Basic Use
----

&vellip;
====

[[a_to_z.semi-colon]]
semi-colon (“;”)::

“separator”::

“server side”::

"setup"::
The noun and adjective are _setup_.
The verb is _to set up_.

"SHA-1"::

"sign-in"::
The noun and adjective are "sign-in".
The verb is _to sign in (to)_ (not _to sign into_).

single quotes (&lsquo;&nbsp;&rsquo;)::
See “quotation marks”.

slang::
We need to avoid slang for two good reasons.
One reason is that it detracts from the professional style that we are trying to convey with our documentation.
The other reason is that non-native speakers may not be familiar with slang terms.
That would impact the accessibility of our documentation.

[[a_to_z.slash]]
slash (“/”)::
The slash character is often used to indicate one or more possibilities from a group.
The slash character should be preceded and followed by a non-breaking space.
For example:
+
[example]
====
The library contains routines to facilitate input&nbsp;/&nbsp;output.
====
+
Try to avoid excessive use of the slash character, particularly when the words _and_ or _or_ would suffice.
For example:
+
[example]
====
I was responsible for bug-fixing *and* maintenance work. *[Not _bug-fixing&nbsp;/&nbsp;maintenance work_.]*

Please get back to me if you have any questions *or* queries. *[Not _if you have any questions&nbsp;/&nbsp;queries_.]*
====
+
Avoid using slashes in abbreviations.
For example:
+
[example]
====
in charge *[Not _i/c_.]*

AC-DC *[Not _AC/DC_, unless in the context of Australian rock groups.]*
====
+
Do not use the slash character to write fractions, such as _1/2_ or _3/4_, as these may be liable to misinterpretation.
+
Instead, use the _&frac12;_ (`\&frac12;` or `\&half;` in AsciiDoc), _&frac14;_ (`\&frac14;`), or _&frac34;_ (`\&frac34;`) characters, if appropriate.
If the required character is not available, use a decimal or spell it out.
For example:
+
[example]
====
The inverse of 8 is *one-eighth*.

The inverse of 8 is *0.125*.
====

"smartphone"::
Do not use this term.
Instead, use _mobile_ or _mobile phone_.

“software as a service”::
At the first mention, write _software as a service (SaaS)_.
On subsequent mentions, write _SaaS_.

"space key"::

split infinitive::
The infinitive of a verb is the form that includes the particle "to".
Examples of infinitives are _to have_, _to hold_, and _to program_.
+
Traditionally, it was considered bad style to "split" the infinitive by placing an adverb between the particle and the verb. For example:
+
[example]
====
It is necessary to *fully* understand the process before starting. *[Instead of, for example, _to understand the process fully_.]*
+
We had to *completely* rebuild the library. *[Instead of, for example, _to rebuild the library completely_.]*
====
+
Although split infinitives are generally considered to be acceptable these days, it is worth considering whether you could easily write your sentence so as to avoid it.
+
However, there may be some cases where strictly imposing the ideal of avoiding split infinitives could result in an awkward sentence or even introduce ambiguity.
Clearly, we need to prioritise simplicity, clarity, and accuracy at all times, even if it means we have to compromise on elegance.

"ssh", "SSH"::
_ssh_ is the terminal utility.
_SSH_ is the associated communications protocol.

"startup"::
The noun and adjective are _startup_.
The verb is _to start up_.

"status bar"::

"style sheet"::

"subclass"::

"subnet"::

"sync"::
The verb forms are _sync_, _syncing_, _synced_.

== T

"tar"::
Do not use the extension _.tar_ to refer to a file type.
For example:
+
[example]
====
a tar file
====

“that”::
If the word “that” is optional, include it for clarity.
The goal, as always, is to help the reader to interpret each phrase and sentence correctly at the first reading.
For example:
+
[example]
====
*Instead of:* _&hellip; to guarantee your software works correctly_,

*use:* _&hellip;to guarantee *that* your software works correctly_.
====

[[a_to_z.that_or_which]]
“that” or “which”?::
In defining relative clauses (see <<a_to_z.relative_clauses,relative clauses>>) we can use either _that_ or _which_.
For example:
+
[example]
====
The company *that* developed the software provides excellent support.

*or*

The company *which* developed the software provides excellent support.
====
+
However, in non-defining relative clauses (see <<a_to_z.relative_clauses,relative clauses>>), we cannot use _that_.
For example:
+
[example]
====
I emailed technical support at BrilSoft, which developed the software.
*[Not _at BrilSoft, that developed the software_.]*
====

“their” or “they’re”?::
Because the pronunciation of _their_ and _they're_ is identical, it is easy to write the wrong form in a moment of absent-mindedness.
As we have made the decision not to use contracted forms in our technical documentation, this error is less likely to arise.
In general, the form _they're_ should not be used.

time::
Use the _ratio_ character ("&ratio;", `\&ratio;`) as the delimiter in times, rather than a standard colon.
The difference is that the _ratio_ character is vertically centered on the line, whereas the colon character is anchored to the baseline.
For example:
+
[example]
====
The seminar begins at *11&ratio;00* UTC.
*[Not _11:00 UTC_.]*
====

“time frame”::

time clauses in the future::
We often use time clauses to refer to some time in the future.
Such clauses may begin with _when_, _while_, _until_, _as soon as_, _before_, and _after_.
In English, we generally use a present or present perfect tense in this type of clause, in spite of the fact that it refers to a future time.
The remainder of the sentence may use any appropriate future form, or an imperative (instruction) form.
For example:
+
[example]
====
As soon as you *get* to the office, call me. *[Not _As soon as you will get&hellip;_]*

While I *am* in Scotland, I'll visit Edinburgh Castle. *[Not _While I will be in Scotland&hellip;_]*

When you *have finished* that work, you can start the next task. *[Not _When you will finish&hellip;_ or _When you will have finished&hellip;_]*
====

"time zone"::
If a time zone has an unambiguous name, on the first use, write it out in full, capitalized.
Use _Coordinated Universal Time (UTC)_ rather than _Greenwich Mean Time (GMT)_.
For example:
+
[example]
====
The first backup was set to run at 09&ratio;00 *Coordinated Universal Time (UTC)*.

The second backup was set to run at 23&ratio;00 *UTC*.
====
+
If the time zone does not have a name, or to guard against misunderstanding, use the form _UTC-n_ or _UTC+n_.
For example:
+
[example]
====
The videoconference is scheduled for 14&ratio;30 *UTC-7*.

The system went down at 21&ratio;43 *UTC+9*.
====

"timeout"::
The noun and adjective are _timeout_.
The verb is _to time out_.

"timestamp"::
The noun, adjective and verb are _timestamp_.

"touchscreen"::

"trojan"::
//-

== U

“unique”::
Something is either unique or it is not.
There can be no degrees of uniqueness.
Hence, avoid using such expressions as _very unique_ or _rather unique_.

units::
There is a space between the numeric quantity and the units.
Abbreviated forms of units are written in the singular.
For example:
+
[example]
====
The maximum permissible weight is 28 *lb*. *[Not _28 lbs_.]*
====
+
The following are the standard abbreviations for common units:
+
[cols="1,1"]
|===
|*unit*
|*abbreviation*
|degree
|&deg; (no space)
|feet
|ft
|gigabyte
|GB
|gram
|g
|hour
|h
|inch
|in
|kilobyte
|kB
|kilowatt
|kW
|litre
|l
|megabit
|Mbit
|megabyte
|MB
|megawatt
|MW
|metre
|m
|millimetre
|mm
|minute
|min
|ounce
|oz
|pound (weight)
|lb
|second
|s
|terabyte
|TB
|===
+
It is very common to use a compound expression with a numeric value and units as a descriptive phrase.
In such cases, use a hyphen to join the compound expression.
Notice that the singular form of the unit is always used.
For example:
+
[example]
====
A *22-page* book. *[Not _A 22-pages book._]*

A *twenty-mile* journey. *[Not _A twenty-miles journey._]*

A *25,000-ton* ship. *[Not _A 25,000-tons ship._]*
====

"unzip"::
Do not use _unzip_.
Instead, use _extract_.

"URL"::
The plural is _URLs_.

"US"::
Do not use _U.S._

"username"::

"UTF"::
_UTF-8_, _UTF-16_, _UTF-32_.

"utilize"::
Avoid _utilize_.
Instead, use _use_.

== V

"v."::
Abbreviation for _version_.
For example:
+
[example]
====
Atom v. 1.57.0
====

Vaadin versions::
Do not use _Vaadin 14_ or other Vaadin version numbers in text.
Instead, use the [role="since:com.vaadin:vaadin@V19"] tag to indicate version numbers.

"via"::
Avoid using _via_.

"vice versa"::
Avoid using _vice versa_, as it is often unclear what exactly is meant.
Use more-specific language.

"vs"::
Write out _versus_ in full.
Avoid using _versus_ in the sense of _compared with_ or _as opposed to_.

== W

"was" or "were"?::

"web"::

“which” or “that”?::
See <<a_to_z.that_or_which,"that" or "which"?>>

“who’s” or “whose”?::
//-

"Wi-Fi"::

"wildcard"::
//-

== X

== Y

"YAML"::
Do not use the extension _.yaml_ to refer to a file type.

== Z

“z” or “s”?::
See “‘s’ or ‘z’”.

"zip"::
Do not use the extension _.zip_ to refer to a file type.
